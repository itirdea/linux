Goodix touchscreen driver
=====================================

1. GPIO pins configuration
=====================================

To provide full functionality, the driver needs to control the interrupt
and reset GPIO pins (configured through ACPI/device tree). For devices that do
not have the GPIO pins properly declared, the functionality depending on these
pins will not be available, but the device can still be used with basic
functionality. Some of the functionalities that depend on having the gpio pins
properly declared areupdating the device configuration and power management.

For both device tree and ACPI, the interrupt GPIO pin configuration is read
from the "irq-gpios" property and the reset pin configuration is read from the
"reset-gpios" property.

An example of how to set the pins for device tree can be found in
Documentation/devicetree/bindings/input/touchscreen/goodix.txt.

For ACPI 5.1, named properties can be specified using the _DSD section.
This functionality will not be available for devices that use indexed GPIO pins
declared in the _CRS section (we need to provide backward compatibility with
devices that do not support using the interrupt GPIO pin as output).

For ACPI, the pins can be specified using ACPI 5.1:
Device (STAC)
{
    Name (_HID, "GDIX1001")
    ...

    Method (_CRS, 0, Serialized)
    {
        Name (RBUF, ResourceTemplate ()
        {
            I2cSerialBus (0x0014, ControllerInitiated, 0x00061A80,
                          AddressingMode7Bit, "\\I2C0",
                          0x00, ResourceConsumer, ,
                          )

            GpioInt (Edge, ActiveHigh, Exclusive, PullNone, 0x0000,
                    "\\I2C0", 0x00, ResourceConsumer, ,
                     )
                     {   // Pin list
                         0
                     }

            GpioIo (Exclusive, PullDown, 0x0000, 0x0000,
                    IoRestrictionOutputOnly, "\\I2C0", 0x00,
                    ResourceConsumer, ,
                    )
                    {
                         1
                    }
        })
        Return (RBUF)
    }

    Name (_DSD,  Package ()
    {
        ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package ()
        {
            Package (2) {"irq-gpios", Package() {^STAC, 0, 0, 0 }},
            Package (2) {"reset-gpios", Package() {^STAC, 1, 0, 0 }},
            ...
         }
     }
}

2. Device configuration
=====================================

Goodix touchscreen devices have a set of registers that specify configuration
information for the device. The configuration information has a specific format
described in the Goodix data sheet. It includes X/Y resolution, maximum
supported touch points, interrupt flags, various sensitivity factors and
settings for advanced features (like gesture recognition).

For more details check the Goodix data sheet for format of Configuration
Registers.

2.1. Reading device configuration
=====================================

The devices have an initial default configuration that can be read through
the sysfs interface (/sys/class/input/inputX/device/dump_config).

2.2. Updating device configuration
=====================================

To update the device configuration, the driver needs to control the interrupt
and reset GPIO pins (configured through ACPI/device tree). Devices that do
not have the GPIO pins properly configured will not be able to update the
configuration.

To update the configuration, you need a configuration firmware file. You can
obtain this file from the vendor or generate one starting from the default
configuration of the device (/sys/class/input/inputX/device/dump_config).

At init, the driver will read the configuration firmware file and update
the device configuration. The configuration data is read with request_firmware
from "goodix_<id>_cfg.bin", where <id> is the product id read from the device
(e.g.: goodix_911_cfg.bin for Goodix GT911, goodix_9271_cfg.bin for GT9271).

Below are instructions on how to generate a valid configuration starting from
the device default configuration.

1. Dump the default configuration of the device to a file:
  $ cat /sys/class/input/inputX/device/dump_config > goodix_<id>_cfg

2. Make the needed changes to the configuration (e.g. change resolution of
X/Y axes, maximum reported touch points, switch X,Y axes, etc.). For more
details check the Goodix data sheet for format of Configuration Registers.

3. Generate a valid configuration starting from goodix_<id>_cfg.
After making changes, you need to recompute the checksum of the entire
configuration data, set Config_Fresh to 1 and generate the binary config
firmware image. This can be done using a helper script similar to the
one below:

#!/bin/bash

if [[ $# -lt 1 ]]; then
    echo "$0 fw_filename"
    exit 1
fi

file_in="$1"
file_out_bin=${file_in}.bin

print_val ()
{
    val="$1"
    printf "0x%.2x" "$val" | xxd -r -p >> ${file_out_bin}
}

rm -f ${file_out_bin}

size=`cat ${file_in} | wc -w`

checksum=0
i=1
for val in `cat ${file_in}`; do
    val="0x$val"
    if [[ $i == $size ]]; then
	# Config_Fresh
	print_val 0x01
    elif [[ $i == $((size-1)) ]]; then
	# Config_Chksum
	checksum=$(( (~ checksum + 1) & 0xFF))
	print_val $checksum
    else
	checksum=$((checksum + val))
	print_val $val
    fi
    i=$((i+1))
done

echo "Wrote ${file_out_bin}"

4. Copy the binary config firmware in the appropriate location
(e.g. /lib/firmware), using the name goodix_<id>_cfg.bin.

5. Check that the new firmware was successfully written to the device
after reboot. Config_Fresh is reset to 0 after a successful update of the
configuration.
